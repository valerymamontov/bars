using System;
using System.Collections.Generic;
using System.IO;
using System.Text;
using System.Xml;

using Барс.Своды.АргументыСобытийОтчетнойФормы;
using Барс.Своды.ОтчетнаяФорма;
using Барс.Своды.ТипыЯчеек;
using Барс.Своды.Увязки;
using Барс.Своды.BI;
using Барс.Своды.BI.ГлобальныйМодуль;

using Барс.Отчеты;
using Барс.Интерфейс;
using Барс.Ядро;

namespace Барс.Своды
{
	public partial class МодульФормы_Пневмония : БазовыйОбработчикФормы
	{
		#region Вставка констант #pred#, #tek# и #note#
			
			public string funcGetPeriod(string m)
			{
				string месяцы = "";
				int месяцОП = Форма.Идентификатор.КомпонентОтчетногоПериода.IОтчетныйПериод.ДатаНачалаПодотчетногоПериода.Month;
				
				if(месяцОП == 1) { месяцы = "месяц";}
				if(месяцОП > 1 && месяцОП < 5) { месяцы = "месяца";}
				if(месяцОП > 4) { месяцы = "месяцев";}
				
				int годОП = Форма.Идентификатор.КомпонентОтчетногоПериода.IОтчетныйПериод.ДатаНачалаПодотчетногоПериода.Year;
				string myPeriod = "";
				
				if(m == "предыдущий")
				{
					myPeriod = месяцОП.ToString() + " " + месяцы + " " + Convert.ToString(годОП - 1) + " года";
				}
				if(m == "текущий")
				{
					myPeriod = месяцОП.ToString() + " " + месяцы + " " + Convert.ToString(годОП) + " года";
				}
				
				return myPeriod;
			}

			
			public string funcAddNote()
			{
				int кодМесяца = Convert.ToInt32(Форма.Идентификатор.КомпонентОтчетногоПериода.IОтчетныйПериод.Код.Substring(3, 2));
				int кодГода = Convert.ToInt32(Форма.Идентификатор.КомпонентОтчетногоПериода.IОтчетныйПериод.Код.Substring(6, 4));
				
				string note = "";
				if(кодМесяца > 5 && (кодГода == 2019 || кодГода > 2019))
				{
					note = "данные переносятся " + "\n" 
					+ "с прошлого года " + "\n"
					+ "автоматически";
				}
				
				return note;
			}
			
			
			public override Dictionary<string, object> ПолучитьСловарьКонстант()
			{
				Dictionary<string,object> константы = new Dictionary<string,object>();
				константы.Add("pred", funcGetPeriod("предыдущий"));
				константы.Add("tek", funcGetPeriod("текущий"));
				константы.Add("note", funcAddNote());
				return константы;
			}
			
		#endregion
	
		#region Событие открытия формы
		public override void ОбработатьСобытиеОткрытияФормы(АргументыОткрытияФормы аргументы)
		{
			
			// при открытии отчётной формы две ячейки блокируются от редактирования пользователем
			// и в эти ячейки выполняется перенос сведений из прошлого года

			int кодМесяца = Convert.ToInt32(Форма.Идентификатор.КомпонентОтчетногоПериода.IОтчетныйПериод.Код.Substring(3, 2));
			int кодГода = Convert.ToInt32(Форма.Идентификатор.КомпонентОтчетногоПериода.IОтчетныйПериод.Код.Substring(6, 4));
			
			if(кодМесяца > 5 && (кодГода == 2019 || кодГода > 2019))
			{
					
				Форма.Таблицы["Пневмония"].МатрицаЗначений.Строки["001"].Ячейки["01"].ТолькоЧтение = true;
				Форма.Таблицы["Пневмония"].МатрицаЗначений.Строки["002"].Ячейки["01"].ТолькоЧтение = true;
					
				#region перенос данных из предыдущего года

					string кодФормы = "Пневмония";
					string текущийГод = Форма.Идентификатор.КомпонентОтчетногоПериода.IОтчетныйПериод.Код.Substring(6, 4);
					int прошлыйГод = Convert.ToInt32(текущийГод) - 1;
					string кодОтчётногоПериода = Convert.ToString(Форма.Идентификатор.КомпонентОтчетногоПериода.IОтчетныйПериод.Код.Substring(0, 6)) 
					+ прошлыйГод;
						
						
					#region поиск компоненты
							Выборка<ОтчетныйПериод> поискПредыдущегоОтчётногоПериода = new Выборка<ОтчетныйПериод>();
							поискПредыдущегоОтчётногоПериода.Запрос.ДобавитьУсловиеОтбора("Код", кодОтчётногоПериода);
							поискПредыдущегоОтчётногоПериода.Загрузить();

							КомпонентОтчетногоПериода компонентПредыдущегоОтчётногоПериода = null;
							bool компонентПредыдущегоОПНайден = false;
										
							foreach (ОтчетныйПериод найденныйПредыдущийОтчетныйПериод in поискПредыдущегоОтчётногоПериода)
							{
								foreach (КомпонентОтчетногоПериода найденныйКомпонентПОП in найденныйПредыдущийОтчетныйПериод.Компоненты)
								{
									if (найденныйКомпонентПОП.ПакетФорм != null)
									{
										foreach (ЭлементПакетаОтчетныхФорм найденнаяФормаПОП in найденныйКомпонентПОП.ПакетФорм.ОтчетныеФормы)
										{
											if (найденнаяФормаПОП.ИдентификаторОтчетнойФормы == кодФормы)
											{
												компонентПредыдущегоОтчётногоПериода = найденныйКомпонентПОП;
												компонентПредыдущегоОПНайден = true;
												break;
											}
										}
										if (компонентПредыдущегоОПНайден) break;
									}
								}
								if (компонентПредыдущегоОПНайден) break;
							}
						//конец поиска компоненты
					#endregion

							
					#region получение данных из компоненты
						ОтчетнаяФормаДанных формаПредыдущегоГода = BI_ОтчетнаяФормаДанных.ПолучитьОтчетнуюФормуДанных(
							(Учреждение)Форма.Идентификатор.Учреждение, 
							компонентПредыдущегоОтчётногоПериода, 
							кодФормы
						);
							
						// выполняется заполнениедвух ячеек данными из прошлого года
						Форма.Таблицы["Пневмония"].МатрицаЗначений.Строки["001"].Ячейки["01"].Значение = 
							формаПредыдущегоГода.Данные.Таблицы["Пневмония"].МатрицаЗначений.Строки["001"].Ячейки["02"].Значение;
						
						Форма.Таблицы["Пневмония"].МатрицаЗначений.Строки["002"].Ячейки["01"].Значение = 
							формаПредыдущегоГода.Данные.Таблицы["Пневмония"].МатрицаЗначений.Строки["002"].Ячейки["02"].Значение;

					#endregion


				#endregion
			}
				
		}
		#endregion
	}
}